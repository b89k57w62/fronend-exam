{
  "profile": {
    "name": "Exam User",
    "email": "exam.user@hkmci.com"
  },
  "categories": [
    "无聊文章",
    "技术",
    "人文",
    "科技"
  ],
  "posts": [
    {
      "id": 1,
      "title": "Hello, World!",
      "summary": "This is a simple summary",
      "date": "2022-04-29T06:41:39.587Z",
      "content": "这是一段简单的内容片段",
      "author": "Exam User",
      "tags": "灌水",
      "category": "无聊文章"
    },
    {
      "id": 2,
      "title": "将设计好的 UI 划分为组件层级",
      "summary": "React 哲学第一步",
      "date": "2022-04-29T06:41:39.587Z",
      "content": "首先，你需要在设计稿上用方框圈出每一个组件（包括它们的子组件），并且以合适的名称命名。如果你是和设计师一起完成此任务，那么他们可能已经做过类似的工作，所以请和他们进行交流！\n他们的 Photoshop 的图层名称可能最终就是你编写的 React 组件的名称！\n但你如何确定应该将哪些部分划分到一个组件中呢？你可以将组件当作一种函数或者是对象来考虑，根据单一功能原则来判定组件的范围。\n也就是说，一个组件原则上只能负责一个功能。如果它需要负责更多的功能，这时候就应该考虑将它拆分成更小的组件。在实践中，因为你经常是在向用户展示 JSON 数据模型，所以如果你的模型设计得恰当，UI（或者说组件结构）便会与数据模型一一对应，这是因为 UI 和数据模型都会倾向于遵守相同的信息结构。\n将 UI 分离为组件，其中每个组件需与数据模型的某部分匹配。组件嵌套图示你会看到我们的应用中包含五个组件。我们已经将每个组件展示的数据标注为了斜体。图片中的序号与下方列表中的序号对应。FilterableProductTable (橙色): 是整个示例应用的整体SearchBar (蓝色): 接受所有的用户输入ProductTable (绿色): 展示数据内容并根据用户输入筛选结果ProductCategoryRow (天蓝色): 为每一个产品类别展示标题ProductRow (红色): 每一行展示一个产品你可能注意到，ProductTable 的表头（包含 “Name” 和 “Price” 的那一部分）并未单独成为一个组件。\n这仅仅是一种偏好选择，如何处理这一问题也一直存在争论。就这个示例而言，因为表头只起到了渲染数据集合的作用——这与 ProductTable 是一致的，所以我们仍然将其保留为 ProductTable 的一部分。但是，如果表头过于复杂（例如，我们需为其添加排序功能），那么将它作为一个独立的 ProductTableHeader 组件就显得很有必要了。现在我们已经确定了设计稿中应该包含的组件，接下来我们将把它们描述为更加清晰的层级。\n设计稿中被其他组件包含的子组件，在层级上应该作为其子节点。FilterableProductTableSearchBarProductTableProductCategoryRowProductRow",
      "author": "Exam User",
      "tags": "React 哲学",
      "category": "技术"
    },
    {
      "id": 3,
      "title": "用 React 创建一个静态版本",
      "summary": "React 哲学第二步",
      "date": "2022-04-29T06:50:20.268Z",
      "content": "参阅 CodePen 上的 React 哲学：第二步。现在我们已经确定了组件层级，可以编写对应的应用了。\n最容易的方式，是先用已有的数据模型渲染一个不包含交互功能的 UI。最好将渲染 UI 和添加交互这两个过程分开。这是因为，编写一个应用的静态版本时，往往要编写大量代码，而不需要考虑太多交互细节；添加交互功能时则要考虑大量细节，而不需要编写太多代码。\n所以，将这两个过程分开进行更为合适。我们会在接下来的代码中体会到其中的区别。在构建应用的静态版本时，我们需要创建一些会重用其他组件的组件，然后通过 props 传入所需的数据。props 是父组件向子组件传递数据的方式。即使你已经熟悉了 state 的概念，也完全不应该使用 state 构建静态版本。state 代表了随时间会产生变化的数据，应当仅在实现交互时使用。\n所以构建应用的静态版本时，你不会用到它。你可以自上而下或者自下而上构建应用：自上而下意味着首先编写层级较高的组件（比如 FilterableProductTable），自下而上意味着从最基本的组件开始编写（比如 ProductRow）。\n当你的应用比较简单时，使用自上而下的方式更方便；对于较为大型的项目来说，自下而上地构建，并同时为低层组件编写测试是更加简单的方式。到此为止，你应该已经有了一个可重用的组件库来渲染你的数据模型。由于我们构建的是静态版本，所以这些组件目前只需提供 render() 方法用于渲染。最顶层的组件 FilterableProductTable 通过 props 接受你的数据模型。如果你的数据模型发生了改变，再次调用 root.render(), UI 就会相应地被更新。\n数据模型变化、调用 render() 方法、UI 相应变化，这个过程并不复杂，因此很容易看清楚 UI 是如何被更新的，以及是在哪里被更新的。\nReact 单向数据流（也叫单向绑定）的思想使得组件模块化，易于快速开发。如果你在完成这一步骤时遇到了困难，可以参阅 React 文档。补充说明: 有关 props 和 state在 React 中，有两类“模型”数据：props 和 state。清楚地理解两者的区别是十分重要的；如果你不太有把握，可以参阅 React 官方文档。你也可以查看 FAQ: state 与 props 的区别是什么？",
      "author": "Exam User",
      "tags": "React 哲学",
      "category": "技术"
    },
    {
      "id": 4,
      "title": "确定 UI state 的最小（且完整）表示",
      "summary": "React 哲学第三步",
      "date": "2022-04-29T06:53:12.431Z",
      "content": "想要使你的 UI 具备交互功能, 需要有触发基础数据模型改变的能力。React 通过实现 state 来完成这个任务。\n为了正确地构建应用, 你首先需要找出应用所需的 state 的最小表示，并根据需要计算出其他所有数据。其中的关键正是 DRY: Don't Repeat Yourself。只保留应用所需的可变 state 的最小集合，其他数据均由它们计算产生。比如，你要编写一个任务清单应用，你只需要保存一个包含所有事项的数组，而无需额外保存一个单独的 state 变量（用于存储任务个数）。当你需要展示任务个数时，只需要利用该数组的 length 属性即可。\n我们的示例应用拥有如下数据：\n包含所有产品的原始列表\n用户输入的搜索词\n复选框是否选中的值\n经过搜索筛选的产品列表\n通过问自己以下三个问题，你可以逐个检查相应数据是否属于 state：\n该数据是否是由父组件通过 props 传递而来的？如果是，那它应该不是 state。\n该数据是否随时间的推移而保持不变？如果是，那它应该也不是 state。\n你能否根据其他 state 或 props 计算出该数据的值？如果是，那它也不是 state。\n包含所有产品的原始列表是经由 props 传入的，所以它不是 state；搜索词和复选框的值应该是 state，因为它们随时间会发生改变且无法由其他数据计算而来；经过搜索筛选的产品列表不是 state，因为它的结果可以由产品的原始列表根据搜索词和复选框的选择计算出来。\n综上所述，属于 state 的有：\n用户输入的搜索词\n复选框是否选中的值",
      "author": "Exam User",
      "tags": "React 哲学",
      "category": "技术"
    },
    {
      "id": 5,
      "title": "确定 state 放置的位置",
      "summary": "React 哲学第四步",
      "date": "2022-04-29T06:53:12.431Z",
      "author": "Exam User",
      "tags": "React 哲学 状态",
      "category": "技术",
      "content": "参阅 CodePen 上的 React 哲学：第四步。\n我们已经确定了应用所需的 state 的最小集合。接下来，我们需要确定哪个组件能够改变这些 state，或者说拥有这些 state。\n注意：React 中的数据流是单向的，并顺着组件层级从上往下传递。哪个组件应该拥有某个 state 这件事，对初学者来说往往是最难理解的部分。尽管这可能在一开始不是那么清晰，但你可以尝试通过以下步骤来判断：\n对于应用中的每一个 state：\n找到根据这个 state 进行渲染的所有组件。\n找到他们的共同所有者（common owner）组件（在组件层级上高于所有需要该 state 的组件）。\n该共同所有者组件或者比它层级更高的组件应该拥有该 state。\n如果你找不到一个合适的位置来存放该 state，就可以直接创建一个新的组件来存放该 state，并将这一新组件置于高于共同所有者组件层级的位置。\n根据以上策略重新考虑我们的示例应用：\nProductTable 需要根据 state 筛选产品列表。SearchBar 需要展示搜索词和复选框的状态。\n他们的共同所有者是 FilterableProductTable。\n因此，搜索词和复选框的值应该很自然地存放在 FilterableProductTable 组件中。\n很好，我们已经决定把这些 state 存放在 FilterableProductTable 组件中。首先，将实例属性 this.state = {filterText: '', inStockOnly: false} 添加到 FilterableProductTable 的 constructor 中，设置应用的初始 state；接着，将 filterText 和 inStockOnly 作为 props 传入 ProductTable 和 SearchBar；最后，用这些 props 筛选 ProductTable 中的产品信息，并设置 SearchBar 的表单值。\n你现在可以看到应用的变化了：将 filterText 设置为 'ball' 并刷新应用，你能发现表格中的数据已经更新了。"
    },
    {
      "id": 6,
      "title": "添加反向数据流",
      "summary": "React 哲学第五步",
      "date": "2022-04-29T06:53:12.431Z",
      "author": "Exam User",
      "tags": "React",
      "category": "技术",
      "content": "参阅 CodePen 上的 React 哲学：第五步。\n到目前为止，我们已经借助自上而下传递的 props 和 state 渲染了一个应用。现在，我们将尝试让数据反向传递：处于较低层级的表单组件更新较高层级的 FilterableProductTable 中的 state。\nReact 通过一种比传统的双向绑定略微繁琐的方法来实现反向数据传递。尽管如此，但这种需要显式声明的方法更有助于人们理解程序的运作方式。\n如果你尝试在上一个示例的搜索框中输入或勾选复选框（步骤 4），React 不会产生任何响应。这是正常的，因为我们之前已经将 input 的值设置为了从 FilterableProductTable 的 state 传递而来的固定值。\n让我们重新梳理一下需要实现的功能：每当用户改变表单的值，我们需要改变 state 来反映用户的当前输入。由于 state 只能由拥有它们的组件进行更改，FilterableProductTable 必须将一个能够触发 state 改变的回调函数（callback）传递给 SearchBar。我们可以使用输入框的 onChange 事件来监视用户输入的变化，并通知 FilterableProductTable 传递给 SearchBar 的回调函数。然后该回调函数将调用 setState()，从而更新应用。"
    },
    {
      "id": 7,
      "title": "宇宙奥秘：中英科学家观测到超级黑洞的“心跳”",
      "summary": "中国和英国的科学家称，他们再次监测到距离地球6亿光年远的一个超级黑洞的“心跳”。据中英科学家证实，10数年后这一黑洞的心跳仍然存在，并依然强健有力。",
      "date": "2022-04-29T06:53:12.431Z",
      "author": "Exam User",
      "tags": "黑洞 宇宙 观察",
      "category": "天文",
      "content": "科学家首次发现这一黑洞的心跳是在2007年。这一黑洞位于距地球约6亿光年的一个名叫RE J1034+396星系的中心。科学家十几年前第一次观测到这一黑洞“心跳”时，每隔一小时进行一次记录。2011年，由于观测卫星的视线受到太阳的遮挡，不得不放弃监测。天文学家说，这是他们在黑洞中所观测到的历时最久的心跳。\n何为黑洞“心跳”？\n所谓黑洞“心跳”，指的是当物质落入黑洞，或者说当黑洞在吸入这些物质时会释放出巨大能量，同时伴有节奏性及周期性震荡信号，就仿佛是心跳一样。当然，黑洞的心跳跟我们所理解的人的心跳完全不同。黑洞心跳有助于科学家了解关于其体积大小，以及其周围空间的更多信息。同时，通过研究黑洞每次跳动之间的间隔，科学家也可以掌握更多有关黑洞附近物质的信息，例如，它的大小等。\n黑洞心跳的意义\n2018年，中国科学院国家天文台高能天体物理团组和英国杜伦大学的科学家们，利用欧洲空间局XMM-牛顿卫星（X射线天文卫星）重新找到了这颗黑洞的心跳。经过详细的数据分析，这一跨国团队最终确认，RE J1034+396的X射线震荡信号仍然存在，并且比10年前更强了。他们认为，这是目前观测到的超大质量黑洞心跳信号的最长持续时间。中国方面的主要研究作者金驰川表示，最新发现证明，由超大质量黑洞产生的此类信号不仅强并且持久。\n金驰川还表示，这为科学家提供了进一步研究这一心跳信号性质和起源的最佳机会。据目前的科学理论认为，黑洞的引力非常强，以至于一切物质，包括光在内，一旦陷入其中就无法逃脱。黑洞是具有无法想象的可怕力量的宇宙真空，仅银河系中就有大约1亿个黑洞。科学家下一步要对他们的发现进行更深入的研究，并希望能够把它同我们星系的黑洞进行比较。"
    },
    {
      "id": 8,
      "title": "人类终于第一次发现黑洞是如何诞生的",
      "summary": "最近，NASA惊爆一则消息：天文学家碰巧发现，第一次观测到一颗恒星正在变成黑洞！这种天大的好运意味着什么？会给天文学带来神马改变？",
      "author": "Exam User",
      "tags": "黑洞 诞生 起源",
      "category": "天文",
      "date": "2022-04-29T07:08:25.292Z",
      "content": "今年4月份，NASA联手ESA欧空局等世界多家顶级天文机构，共同给人马座A*拍定妆照，目前正在数据处理和后期处理，一旦公布，这将是人类第一次为黑洞拍的证明照，也是黑洞第一张照片！以往我们见到的所有黑洞图片其实都是黑洞艺术照，天文学家+艺术家联手绘制的想象图。\n其实，这恰恰是科学共同体的严谨。因为科学之所以被称为科学，必须是能够被证实、检验的。再漂亮的科学理论，如果没经过检验，也还只是一种假说。同样道理，确定黑洞是否存在，目前为止还没有一种直接检验的方法。所以呢，天文学家识别黑洞，最终靠的是淘汰法。某种天体致密而且质量巨大，如果不是中子星或者别的什么大质量天体的话，那么就可以推断它是黑洞了。用这种淘汰法识别黑洞，现已被天文学家广泛接受了\n至于，为什么确定是变成了黑洞，天文学家采用的就是我前面介绍的「淘汰法」。天体致密而且质量巨大，如果不是中子星或者别的什么大质量天体的话，那么就可以推断它是黑洞了。\n这次重大发现的意义是什么？\n以往天文学界认为，黑洞的形成，通常是由至少超过3倍质量大的大质量恒星，经过超新星爆发后，才能坍缩形成。而这次直接观测到黑洞的诞生，却打破这一黑洞理论模型，大质量恒星在自己的末日——变成红超巨星后，直接变身成为最暗黑的黑洞！而不必全都经过闪耀全宇宙的超新星爆发过程。\n黑洞理论，就此改写！人类离黑洞谜底更近一步了。"
    },
    {
      "id": 9,
      "title": "2022年星链宽带将有哪些期待？(1)",
      "summary": "SpaceX 的火箭冉冉升起",
      "content": "2022开年第一发仍由SpaceX开局，这是该发射商连续第3次、总计第5次抢先打出第一发，继续快速部署自家星链任务（Starlink Group 4-5），为第4个轨道层运送第5批49颗卫星。\n历数近年来全球发射史，SpaceX拿下2022年、2021年、2020年、2018年、2015年总计5次全球首发。作为对标发射商中国航天科技集团凭借长三乙，最近几年拿下过2019年、2017年、2016年三次开门红。\n跟以往部署星链任务一样，此次同样是瞬时发射。美国东部时间1月6日16:49（北京时间1月7日5:49，相差13小时），位于佛州卡角肯尼迪航天中心39A黄金发射位，B1062.4作为一箭第四飞腾空而起，鹰击长空，起飞后开始朝东南方向飞行。\n升空1分钟12秒，这枚猎鹰9号火箭穿过空气最大阻力点（Max Q）。此时飞行高度12公里，速度0.4公里/秒。T+2分32秒，一级火箭9台梅林发动机关闭。紧接着一二级分离，一级火箭开始全自动返航再入大气层。升空2分44秒，二级火箭首次点火推进，随后释放整流罩。\n经过三次返航点火反推，T+8分49秒，B1062.4第4次成功回收，垂直着陆在缺少庄重感（ASOG）海上平台上，此时距离佛州39A发射场约637公里。\n这次成功落定是SpaceX连续第27次成功回收火箭、总计第101次回收一级火箭、第78次海上回收火箭，也是ASOG【缺少庄重感】第5次回收火箭。\n发射升空15分钟31秒，星箭分离，随后开始部署49颗1.5版星链卫星，部署轨道：近地点高度211公里，远地点高度341公里，赤道倾角53.2°。目标轨道：540公里 x 赤道倾角53.2°。\n每颗1.5版星链卫星只有办公桌大小、重290公斤，比之前1.0版260公斤稍重些。展开单翼太阳能阵列之后，启动造价便宜、推力偏低的氪离子推进器逐渐爬升，再经过SpaceX卫星运维团队测试检查无误后，继续缓慢爬升至540公里的最终轨道，这一过程大约需要数周时间。\n我们知道，以往从佛州发射场（无论是肯尼迪航天中心39A，还是卡角40号）发射星链任务时，都是朝东北飞行，但这次发射却是一反常态，朝向东南飞行。\n",
      "author": "Exam User",
      "tags": "SpaceX 星链宽带 期待",
      "category": "科技",
      "date": "2022-04-29T07:20:56.451Z"
    },
    {
      "id": 10,
      "title": "2022年星链宽带将有哪些期待？(2)",
      "summary": "书接上回: 事实上，以往发射都遵循这样一条安全原则：朝向东南方向发射必须绕过巴哈马群岛飞行，以避免可能造成的火箭碎片掉落到有人居住的岛屿上。",
      "content": "这次发射任务之所以被美国政府部门批准，原因就是对SpaceX安全发射信任度极高，无论是发射成功几率，还是火箭回收成功几率，评估值都很高。SpaceX需要做的就是在航线设计上遵循安全原则，先是在阿巴科群岛以北的大西洋上空飞行，然后稍微向右偏转，让火箭飞得更高更远。\n编号B1062.4的这枚一级火箭，可谓战绩显赫——先后部署过GPS III SV04、GPS III SV05、Inspiration4、Starlink Group 4-5任务。也就是说，两次发射第三代GPS卫星、一次承运全球首次全民用轨道载人航天、1次部署自家星链。从2020年11月至2022年1月，15个月飞行4次。\n截至北京时间2022年1月7日，SpaceX已总计发射1993颗星链卫星，包括最初2颗Tintin丁丁测试卫星、1批0.9版卫星（60颗）、28批1.0版卫星（1678颗，包括2批极轨道卫星13颗）、5批1.5版卫星（253颗）。目前在轨1842颗，空间操作1813颗、正式运营1468颗，脱轨/再入180颗。\n这次发射任务代号为Starlink Group 4-5，代表着第5批次部署星链星座第一阶段的第四个轨道层。（不过需要注意的是，Starlink Group 4-2任务因故尚未部署，所以这次任务也是星链第五个轨道层第3次发射）\n按照星链星座设计，第四个轨道层由72个轨道面组成，每个轨道面包括22颗，总计1584颗卫星构成，运行高度540公里，赤道倾角为53.2°。现已累计发射206颗。\n星链星座是目前唯一快速部署的巨型星座，正在向全球25个国家、14.5万用户提供互联网服务。\n根据马斯克透露，星链将在2022年年底前实现全球海洋覆盖，这会让远洋船舶、商业飞机、移动车辆都能够访问星链宽带。\n预计2022年，星链网速将提升至300M以上，延迟降至20毫秒，SpaceX将会成规模部署2.0版星链卫星，开启移动服务，全球用户有望突破百万。",
      "author": "Exam User",
      "tags": "SpaceX 星链宽带 期待",
      "category": "科技",
      "date": "2022-04-29T07:20:56.451Z"
    },
    {
      "id": 11,
      "title": "NASA局长：重返月球首飞至少一年！背后真相是啥？",
      "author": "Exam User",
      "tags": "NASA 登月",
      "category": "科技",
      "date": "2022-04-29T07:20:56.451Z",
      "summary": "美东时间11月9日，NASA局长比尔·纳尔逊(Bill Nelson)在两位副局长陪同下正式对外宣布这一消息。并不意外。由NASA主导多年的重返月球计划（正式名称「阿耳忒弥斯」计划）一波N折，从最初2028年被川普提前至2024年，这一激进时间表随后被一连串作用力冲撞，从「黑洞项目」、到「无法按期交货」的登月宇航服，再到「总是预算不足」「既得利益集团作祟」……",
      "content": "我们知道，今年5月美国政府问责局公布：NASA自2003年来主要项目超支状况，猎户座飞船、太空发射系统SLS、詹姆斯·韦伯望远镜JWST成为三大黑洞项目。单是猎户座飞船项目就超过50年前阿波罗飞船成本。截至2020年，猎户座就已耗资187亿美元、SLS耗资186亿美元、JWST耗资100亿美元，合计超支80亿，占超支总额96亿的83%。\n按照维基百科援引业界媒体给出数据，则更为惊人：猎户座飞船项目现已累计耗资201亿美元，太空发射系统SLS累计耗资210亿美元。事实上，表面来看是「黑洞项目拖累」，背后实则是「既得利益集团作祟」。正因为背后都是军火/航天巨头——诺斯罗普·格鲁曼、洛克希德·马丁、波音各自攥着这些黑洞级项目，都是典型的狮子大开口+严重拖延症+准垄断，都属于一个属性：拖得越久赚得越多！对于这些既得利益集团的一贯套路，NASA哪有不明白道理？！除非NASA高层自投罗网，勾兑一气，心甘情愿被绑架。\n既然幕后这般模样，我们也就不难理解：为啥NASA多年来一直死保SLS+猎户座飞船模式不放。即便是星舰成为最有力竞争者，还是设计一条怪异的登月路径：SLS+猎户座飞船+星舰登月器。\n要知道，既然星舰被指定为唯一载人登月器，到时候当然具备往返地月间运输能力，却为啥不让登月宇航员直接搭乘星舰一步登月，非得不嫌麻烦搞换乘模式？说白了，一旦选择星舰一步登月模式，就意味着彻底抛弃SLS+猎户座飞船，等同于斩断既得利益链，无异于挥刀自宫。当然，NASA决策层也不都是吃干饭的。NASA之所以选中星舰作为载人登月器，还有一个暗线没有挑明，这就是登月版星舰一旦获得可靠性技术验证，就意味着NASA可以彻底享用「登月一体化」，因为从发射升空到进入月球轨道、再到着陆月表，星舰系统完全有能力提供一条龙承运服务，也意味着NASA同时拥有两条登月路径：一条由星舰系统打通；另一条是SLS+猎户座飞船+登月星舰构建，这不仅有效分摊风险，而且执掌主动权。相对于现实来说，这可能是最乐观的预期，现实往往没那么美好。另一种可能就是被航天巨头把持的SLS+猎户座关键时刻掉链子，或者一再难产，甚至半路夭折，这时候就到了星舰力挽狂澜，成为阿尔忒弥斯整个任务顶梁柱的荣耀时刻——因为重大机遇都是为实力派准备的。\n"
    },
    {
      "title": "简简单单的测试",
      "author": "Exam User",
      "tags": "NASA 登月",
      "category": "科技",
      "date": "2022-04-29T07:20:56.451Z",
      "summary": "测试 POST",
      "content": "Hello, world 2",
      "id": 12
    }
  ]
}